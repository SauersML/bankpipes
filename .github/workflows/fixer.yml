name: Fix

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  fix-non-breaking-spaces:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Check for non-breaking spaces and fix them
      id: fix-nbsp
      run: |
        # Skip if this is already a bot commit to avoid infinite loops
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        if [[ "$COMMIT_MSG" == *"[bot] Fix non-breaking spaces"* ]] || [[ "$COMMIT_MSG" == *"Auto-fix non-breaking spaces"* ]]; then
          echo "Skipping: This is already a bot commit"
          echo "changes_made=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Scanning for non-breaking spaces..."
        
        # Initialize variables
        changes_made=false
        files_changed=()
        
        # Find all text files and process them directly
        find . -type f \
          -not -path "./.git/*" \
          -not -path "./node_modules/*" \
          -not -path "./.venv/*" \
          -not -path "./venv/*" \
          -not -path "./__pycache__/*" \
          -not -path "*/.*cache*/*" \
          -not -path "./build/*" \
          -not -path "./dist/*" \
          -not -path "./.next/*" \
          -not -path "./target/*" \
          -not -path "./.github/*" \
          -not -name "*.png" \
          -not -name "*.jpg" \
          -not -name "*.jpeg" \
          -not -name "*.gif" \
          -not -name "*.pdf" \
          -not -name "*.ico" \
          -not -name "*.woff*" \
          -not -name "*.ttf" \
          -not -name "*.eot" \
          -not -name "*.zip" \
          -not -name "*.tar.gz" \
          -not -name "*.exe" \
          -not -name "*.dll" \
          -not -name "*.so" \
          -not -name "*.dylib" \
          -not -name "*.bin" \
          -not -name "*.class" | while IFS= read -r file; do
          
          # Skip if not a regular file
          if [ ! -f "$file" ]; then
            continue
          fi
          
          # Check if file is likely binary (simple heuristic)
          if file "$file" | grep -q "binary\|executable\|archive"; then
            continue
          fi
          
          # Check if file contains non-breaking spaces using multiple methods
          has_nbsp=false
          
          # Method 1: Check for UTF-8 encoded non-breaking space (0xC2 0xA0)
          if hexdump -C "$file" | grep -q "c2 a0"; then
            has_nbsp=true
          fi
          
          # Method 2: Check using od for the Unicode character
          if od -t x1 "$file" | grep -q "c2 a0"; then
            has_nbsp=true
          fi
          
          # Method 3: Python check as fallback
          if python3 -c "
import sys
try:
    with open('$file', 'rb') as f:
        content = f.read()
    if b'\\xc2\\xa0' in content:
        sys.exit(1)
except:
    pass
" 2>/dev/null; then
            : # No non-breaking spaces found
          else
            has_nbsp=true
          fi
          
          if [ "$has_nbsp" = true ]; then
            echo "Found non-breaking spaces in: $file"
            
            # Create a Python script to fix the file
            python3 -c "
import sys
import os

try:
    # Read the file in binary mode
    with open('$file', 'rb') as f:
        content = f.read()
    
    # Replace UTF-8 encoded non-breaking spaces with regular spaces
    original_content = content
    content = content.replace(b'\\xc2\\xa0', b' ')  # UTF-8 non-breaking space
    content = content.replace(b'\\xa0', b' ')       # Latin-1 non-breaking space
    
    # Write back if changes were made
    if content != original_content:
        with open('$file', 'wb') as f:
            f.write(content)
        print('Successfully fixed: $file')
        sys.exit(0)  # Success
    else:
        print('No changes needed for: $file')
        sys.exit(1)  # No changes
        
except Exception as e:
    print(f'Error processing $file: {e}')
    sys.exit(2)  # Error
"
            
            # Check the Python script exit code
            case $? in
              0)
                echo "✅ Fixed non-breaking spaces in: $file"
                files_changed+=("$file")
                changes_made=true
                ;;
              1)
                echo "ℹ️ No changes needed for: $file"
                ;;
              2)
                echo "❌ Error processing: $file"
                ;;
            esac
          fi
        done
        
        # Export results
        if [ "$changes_made" = true ]; then
          echo "Files with fixes: ${files_changed[*]}"
          echo "changes_made=true" >> $GITHUB_OUTPUT
          
          # Convert array to space-separated string for output
          files_string=$(printf "%s " "${files_changed[@]}")
          echo "files_changed=${files_string% }" >> $GITHUB_OUTPUT
        else
          echo "No non-breaking spaces found or no changes made"
          echo "changes_made=false" >> $GITHUB_OUTPUT
        fi

    - name: Configure Git
      if: steps.fix-nbsp.outputs.changes_made == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"

    - name: Commit and push changes
      if: steps.fix-nbsp.outputs.changes_made == 'true'
      run: |
        git add -A
        git status
        
        # Create commit message
        git commit -m "[bot] Auto-fix non-breaking spaces in code files

Automatically replaced non-breaking spaces (U+00A0) with regular spaces.
This prevents Python SyntaxError and other parsing issues.

Files affected: ${{ steps.fix-nbsp.outputs.files_changed }}

[skip ci]"
        
        # Push the changes
        git push

    - name: Create comment on PR (if applicable)
      if: steps.fix-nbsp.outputs.changes_made == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const files = '${{ steps.fix-nbsp.outputs.files_changed }}';
          const fileList = files.split(' ').filter(f => f.length > 0).map(f => `- \`${f}\``).join('\n');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🤖 **Auto-fix Applied**: Non-breaking spaces were detected and automatically replaced with regular spaces in the following files:

${fileList}

This prevents syntax errors and parsing issues. The changes have been committed automatically.`
          });

    - name: Summary
      run: |
        if [ "${{ steps.fix-nbsp.outputs.changes_made }}" = "true" ]; then
          echo "✅ Non-breaking spaces were found and fixed automatically"
          echo "📝 Files updated: ${{ steps.fix-nbsp.outputs.files_changed }}"
        else
          echo "✅ No non-breaking spaces detected or no fixes needed"
        fi
